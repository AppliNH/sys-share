// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v2

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DbAdminServiceClient is the client API for DbAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DbAdminServiceClient interface {
	Backup(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BackupAllResult, error)
	ListBackup(ctx context.Context, in *ListBackupRequest, opts ...grpc.CallOption) (*ListBackupResult, error)
	Restore(ctx context.Context, in *RestoreAllRequest, opts ...grpc.CallOption) (*RestoreAllResult, error)
}

type dbAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDbAdminServiceClient(cc grpc.ClientConnInterface) DbAdminServiceClient {
	return &dbAdminServiceClient{cc}
}

var dbAdminServiceBackupStreamDesc = &grpc.StreamDesc{
	StreamName: "Backup",
}

func (c *dbAdminServiceClient) Backup(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BackupAllResult, error) {
	out := new(BackupAllResult)
	err := c.cc.Invoke(ctx, "/v2.sys_core.services.DbAdminService/Backup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var dbAdminServiceListBackupStreamDesc = &grpc.StreamDesc{
	StreamName: "ListBackup",
}

func (c *dbAdminServiceClient) ListBackup(ctx context.Context, in *ListBackupRequest, opts ...grpc.CallOption) (*ListBackupResult, error) {
	out := new(ListBackupResult)
	err := c.cc.Invoke(ctx, "/v2.sys_core.services.DbAdminService/ListBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var dbAdminServiceRestoreStreamDesc = &grpc.StreamDesc{
	StreamName: "Restore",
}

func (c *dbAdminServiceClient) Restore(ctx context.Context, in *RestoreAllRequest, opts ...grpc.CallOption) (*RestoreAllResult, error) {
	out := new(RestoreAllResult)
	err := c.cc.Invoke(ctx, "/v2.sys_core.services.DbAdminService/Restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DbAdminServiceService is the service API for DbAdminService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterDbAdminServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type DbAdminServiceService struct {
	Backup     func(context.Context, *empty.Empty) (*BackupAllResult, error)
	ListBackup func(context.Context, *ListBackupRequest) (*ListBackupResult, error)
	Restore    func(context.Context, *RestoreAllRequest) (*RestoreAllResult, error)
}

func (s *DbAdminServiceService) backup(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.Backup == nil {
		return nil, status.Errorf(codes.Unimplemented, "method Backup not implemented")
	}
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Backup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/v2.sys_core.services.DbAdminService/Backup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Backup(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *DbAdminServiceService) listBackup(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.ListBackup == nil {
		return nil, status.Errorf(codes.Unimplemented, "method ListBackup not implemented")
	}
	in := new(ListBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.ListBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/v2.sys_core.services.DbAdminService/ListBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListBackup(ctx, req.(*ListBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *DbAdminServiceService) restore(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.Restore == nil {
		return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
	}
	in := new(RestoreAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/v2.sys_core.services.DbAdminService/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Restore(ctx, req.(*RestoreAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterDbAdminServiceService registers a service implementation with a gRPC server.
func RegisterDbAdminServiceService(s grpc.ServiceRegistrar, srv *DbAdminServiceService) {
	sd := grpc.ServiceDesc{
		ServiceName: "v2.sys_core.services.DbAdminService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Backup",
				Handler:    srv.backup,
			},
			{
				MethodName: "ListBackup",
				Handler:    srv.listBackup,
			},
			{
				MethodName: "Restore",
				Handler:    srv.restore,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "sys_core_services.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewDbAdminServiceService creates a new DbAdminServiceService containing the
// implemented methods of the DbAdminService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewDbAdminServiceService(s interface{}) *DbAdminServiceService {
	ns := &DbAdminServiceService{}
	if h, ok := s.(interface {
		Backup(context.Context, *empty.Empty) (*BackupAllResult, error)
	}); ok {
		ns.Backup = h.Backup
	}
	if h, ok := s.(interface {
		ListBackup(context.Context, *ListBackupRequest) (*ListBackupResult, error)
	}); ok {
		ns.ListBackup = h.ListBackup
	}
	if h, ok := s.(interface {
		Restore(context.Context, *RestoreAllRequest) (*RestoreAllResult, error)
	}); ok {
		ns.Restore = h.Restore
	}
	return ns
}

// UnstableDbAdminServiceService is the service API for DbAdminService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableDbAdminServiceService interface {
	Backup(context.Context, *empty.Empty) (*BackupAllResult, error)
	ListBackup(context.Context, *ListBackupRequest) (*ListBackupResult, error)
	Restore(context.Context, *RestoreAllRequest) (*RestoreAllResult, error)
}

// BusServiceClient is the client API for BusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusServiceClient interface {
	Broadcast(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
}

type busServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBusServiceClient(cc grpc.ClientConnInterface) BusServiceClient {
	return &busServiceClient{cc}
}

var busServiceBroadcastStreamDesc = &grpc.StreamDesc{
	StreamName: "Broadcast",
}

func (c *busServiceClient) Broadcast(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/v2.sys_core.services.BusService/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusServiceService is the service API for BusService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterBusServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type BusServiceService struct {
	Broadcast func(context.Context, *EventRequest) (*EventResponse, error)
}

func (s *BusServiceService) broadcast(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.Broadcast == nil {
		return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
	}
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/v2.sys_core.services.BusService/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Broadcast(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterBusServiceService registers a service implementation with a gRPC server.
func RegisterBusServiceService(s grpc.ServiceRegistrar, srv *BusServiceService) {
	sd := grpc.ServiceDesc{
		ServiceName: "v2.sys_core.services.BusService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Broadcast",
				Handler:    srv.broadcast,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "sys_core_services.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewBusServiceService creates a new BusServiceService containing the
// implemented methods of the BusService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewBusServiceService(s interface{}) *BusServiceService {
	ns := &BusServiceService{}
	if h, ok := s.(interface {
		Broadcast(context.Context, *EventRequest) (*EventResponse, error)
	}); ok {
		ns.Broadcast = h.Broadcast
	}
	return ns
}

// UnstableBusServiceService is the service API for BusService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableBusServiceService interface {
	Broadcast(context.Context, *EventRequest) (*EventResponse, error)
}

// EmailServiceClient is the client API for EmailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailServiceClient interface {
	SendMail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*EmailResponse, error)
}

type emailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailServiceClient(cc grpc.ClientConnInterface) EmailServiceClient {
	return &emailServiceClient{cc}
}

var emailServiceSendMailStreamDesc = &grpc.StreamDesc{
	StreamName: "SendMail",
}

func (c *emailServiceClient) SendMail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, "/v2.sys_core.services.EmailService/SendMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailServiceService is the service API for EmailService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterEmailServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type EmailServiceService struct {
	SendMail func(context.Context, *EmailRequest) (*EmailResponse, error)
}

func (s *EmailServiceService) sendMail(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.SendMail == nil {
		return nil, status.Errorf(codes.Unimplemented, "method SendMail not implemented")
	}
	in := new(EmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.SendMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/v2.sys_core.services.EmailService/SendMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SendMail(ctx, req.(*EmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterEmailServiceService registers a service implementation with a gRPC server.
func RegisterEmailServiceService(s grpc.ServiceRegistrar, srv *EmailServiceService) {
	sd := grpc.ServiceDesc{
		ServiceName: "v2.sys_core.services.EmailService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "SendMail",
				Handler:    srv.sendMail,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "sys_core_services.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewEmailServiceService creates a new EmailServiceService containing the
// implemented methods of the EmailService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewEmailServiceService(s interface{}) *EmailServiceService {
	ns := &EmailServiceService{}
	if h, ok := s.(interface {
		SendMail(context.Context, *EmailRequest) (*EmailResponse, error)
	}); ok {
		ns.SendMail = h.SendMail
	}
	return ns
}

// UnstableEmailServiceService is the service API for EmailService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableEmailServiceService interface {
	SendMail(context.Context, *EmailRequest) (*EmailResponse, error)
}

// AnalyticsServiceClient is the client API for AnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyticsServiceClient interface {
	SendAnalyticsEvent(ctx context.Context, in *ModEvent, opts ...grpc.CallOption) (*empty.Empty, error)
	DownloadAnalytics(ctx context.Context, in *DownloadAnalyticsRequest, opts ...grpc.CallOption) (*DownloadAnalyticsResponse, error)
}

type analyticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsServiceClient(cc grpc.ClientConnInterface) AnalyticsServiceClient {
	return &analyticsServiceClient{cc}
}

var analyticsServiceSendAnalyticsEventStreamDesc = &grpc.StreamDesc{
	StreamName: "SendAnalyticsEvent",
}

func (c *analyticsServiceClient) SendAnalyticsEvent(ctx context.Context, in *ModEvent, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v2.sys_core.services.AnalyticsService/SendAnalyticsEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var analyticsServiceDownloadAnalyticsStreamDesc = &grpc.StreamDesc{
	StreamName: "DownloadAnalytics",
}

func (c *analyticsServiceClient) DownloadAnalytics(ctx context.Context, in *DownloadAnalyticsRequest, opts ...grpc.CallOption) (*DownloadAnalyticsResponse, error) {
	out := new(DownloadAnalyticsResponse)
	err := c.cc.Invoke(ctx, "/v2.sys_core.services.AnalyticsService/DownloadAnalytics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServiceService is the service API for AnalyticsService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterAnalyticsServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type AnalyticsServiceService struct {
	SendAnalyticsEvent func(context.Context, *ModEvent) (*empty.Empty, error)
	DownloadAnalytics  func(context.Context, *DownloadAnalyticsRequest) (*DownloadAnalyticsResponse, error)
}

func (s *AnalyticsServiceService) sendAnalyticsEvent(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.SendAnalyticsEvent == nil {
		return nil, status.Errorf(codes.Unimplemented, "method SendAnalyticsEvent not implemented")
	}
	in := new(ModEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.SendAnalyticsEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/v2.sys_core.services.AnalyticsService/SendAnalyticsEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SendAnalyticsEvent(ctx, req.(*ModEvent))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *AnalyticsServiceService) downloadAnalytics(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.DownloadAnalytics == nil {
		return nil, status.Errorf(codes.Unimplemented, "method DownloadAnalytics not implemented")
	}
	in := new(DownloadAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.DownloadAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/v2.sys_core.services.AnalyticsService/DownloadAnalytics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DownloadAnalytics(ctx, req.(*DownloadAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterAnalyticsServiceService registers a service implementation with a gRPC server.
func RegisterAnalyticsServiceService(s grpc.ServiceRegistrar, srv *AnalyticsServiceService) {
	sd := grpc.ServiceDesc{
		ServiceName: "v2.sys_core.services.AnalyticsService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "SendAnalyticsEvent",
				Handler:    srv.sendAnalyticsEvent,
			},
			{
				MethodName: "DownloadAnalytics",
				Handler:    srv.downloadAnalytics,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "sys_core_services.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewAnalyticsServiceService creates a new AnalyticsServiceService containing the
// implemented methods of the AnalyticsService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewAnalyticsServiceService(s interface{}) *AnalyticsServiceService {
	ns := &AnalyticsServiceService{}
	if h, ok := s.(interface {
		SendAnalyticsEvent(context.Context, *ModEvent) (*empty.Empty, error)
	}); ok {
		ns.SendAnalyticsEvent = h.SendAnalyticsEvent
	}
	if h, ok := s.(interface {
		DownloadAnalytics(context.Context, *DownloadAnalyticsRequest) (*DownloadAnalyticsResponse, error)
	}); ok {
		ns.DownloadAnalytics = h.DownloadAnalytics
	}
	return ns
}

// UnstableAnalyticsServiceService is the service API for AnalyticsService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableAnalyticsServiceService interface {
	SendAnalyticsEvent(context.Context, *ModEvent) (*empty.Empty, error)
	DownloadAnalytics(context.Context, *DownloadAnalyticsRequest) (*DownloadAnalyticsResponse, error)
}
